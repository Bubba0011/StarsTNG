@inject IJSRuntime JSRuntime

<style>
	.swig {
		background-color: rgb(20,20,20);
		cursor: @(InAutoSelectMode ? "default" : "crosshair");
	}
</style>

@if (GameWrapper.Client != null)
{
	<SvgBox CssClass="swig" OnClick="SvgBoxClicked" FocusOn="@focus">
		<GalaxyBoundingBox IsFilled="true" />
		<ScannerLayer />
		<GalaxyGrid />
		<GalaxyBoundingBox IsOutlined="true" />

		<ComLayer />
		<FleetLayer />
		<PlanetLayer InStdMode="@(DisplayMode == UiDisplayMode.Default)" />

		@ChildContent
	</SvgBox>
}

@code
{
	private Focus focus = new Focus() { View = Vector.Zero };

	IGalaxy Galaxy => GameWrapper.Client.GalaxyView;
	private bool InAutoSelectMode => !UiWrapper.InClickMode;
	private UiDisplayMode DisplayMode => UiWrapper.DisplayMode;

	[CascadingParameter(Name = "UIWrapper")]
	public UIWrapper UiWrapper { get; set; }

	[CascadingParameter(Name = "GameWrapper")]
	public GameWrapper GameWrapper { get; set; }

	[Parameter]
	public RenderFragment ChildContent { get; set; }

	[Parameter]
	public EventCallback<SvgMouseEventArgs> Clicked { get; set; }

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			var reference = DotNetObjectReference.Create(this);
			await JSRuntime.BindCallbackMethod(reference, "UiGalaxy", "zoomEvent");
		}
	}

	private async Task SvgBoxClicked(SvgMouseEventArgs e)
	{
		if (InAutoSelectMode)
		{
			TargetObject(e);
		}
		else
		{
			await Clicked.InvokeAsync(e);
		}
	}

	private void TargetObject(SvgMouseEventArgs e)
	{
		var position = new Position((int)e.SvgCoords.X, (int)e.SvgCoords.Y);
		UiWrapper.Selection.TargetObject(Galaxy, position);
	}

	[JSInvokable("ZoomCallback")]
	public void ZoomChanged(string zoomFactor)
	{
		double zoomDouble = 1.0;
		Double.TryParse(zoomFactor, NumberStyles.Any, CultureInfo.InvariantCulture, out zoomDouble);

		UiWrapper.Zoom = 1 / zoomDouble;
	}
}
