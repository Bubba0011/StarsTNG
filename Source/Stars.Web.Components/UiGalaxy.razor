@inject IJSRuntime JSRuntime

<style>
	.swig {
		background-color: rgb(20,20,20);
		cursor: @(InAutoSelectMode ? "default" : "crosshair");
	}
</style>

@if (Galaxy != null)
{
	<CascadingValue Name="GameWrapper" Value="@GameWrapper">
		<CascadingValue Name="UIWrapper" Value="@uiWrapper">
			<SvgBox CssClass="swig" OnClick="SvgBoxClicked" FocusOn="@focus">
				<GalaxyBoundingBox IsFilled="true" />
				<ScannerLayer />
				<GalaxyGrid />
				<GalaxyBoundingBox IsOutlined="true" />

				<ComLayer />
				<FleetLayer />
				<PlanetLayer InStdMode="@(DisplayMode == UiDisplayMode.Default)" />
				@*<SelectionLayer SelectedObject="Selection.SelectedObject" />*@

				@ChildContent
			</SvgBox>
		</CascadingValue>
	</CascadingValue>
}

@code
{
	Focus focus = new Focus() { View = Vector.Zero };
	UIWrapper uiWrapper = new UIWrapper() { Zoom = 1.0 };
	IGalaxy Galaxy => GameWrapper.Client.GalaxyView;

	[Parameter]
	public Selection Selection { get; set; }

	[Parameter]
	public GameWrapper GameWrapper { get; set; }

	[Parameter]
	public RenderFragment ChildContent { get; set; }

	[Parameter]
	public EventCallback<Selection> SelectionChanged { get; set; }

	[Parameter]
	public bool InAutoSelectMode { get; set; } = true;

	[Parameter]
	public UiDisplayMode DisplayMode { get; set; } = UiDisplayMode.Default;

	[Parameter]
	public EventCallback<SvgMouseEventArgs> Clicked { get; set; }

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			uiWrapper = new UIWrapper() { Zoom = 1.0 };
			var reference = DotNetObjectReference.Create(this);
			await JSRuntime.BindCallbackMethod(reference, "UiGalaxy", "zoomEvent");
		}
	}

	private async Task SvgBoxClicked(SvgMouseEventArgs e)
	{
		if (InAutoSelectMode)
		{
			await TargetObject(e);
		}
		else
		{
			await Clicked.InvokeAsync(e);
		}
	}

	private async Task TargetObject(SvgMouseEventArgs e)
	{
		var position = new Position((int)e.SvgCoords.X, (int)e.SvgCoords.Y);
		Selection = uiWrapper.Selection = uiWrapper.Selection.TargetObject(Galaxy, position);
		await SelectionChanged.InvokeAsync(Selection);
	}

	[JSInvokable("ZoomCallback")]
	public void ZoomChanged(string zoomFactor)
	{
		double zoomDouble = 1.0;
		Double.TryParse(zoomFactor, NumberStyles.Any, CultureInfo.InvariantCulture, out zoomDouble);

		uiWrapper.Zoom = 1 / zoomDouble;

		StateHasChanged();
	}
}
