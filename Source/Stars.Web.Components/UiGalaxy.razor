
<style>
	.swig {
		background-color: rgb(20,20,20);
	}

	.galaxy-box {
		stroke: rgb(20,40,60);
		stroke-width: 2px;
		fill: black;
	}

	.grid-line {
		stroke: rgb(20,40,60);
	}

	.grid-level-1 {
		stroke-width: 0.75px;
	}

	.grid-level-2 {
		stroke-width: 0.5px;
	}

	.grid-level-3 {
		stroke-width: 0.25px;
	}

	.planet {
		fill: rgb(100,120,160);
	}
</style>

@if (Galaxy != null)
{
	<SvgBox CssClass="swig" 
			OnClick="TargetObject" 
			FocusOn="@focus">

		<rect x="@(-gridSide)" y="@(-gridSide)" width="@Galaxy.Size" height="@Galaxy.Size" class="galaxy-box" />

		@foreach (var (coord, level) in GetGridLines())
		{
			<line x1="@(-gridSide)" x2="@gridSide" y1="@coord" y2="@coord" class="@($"grid-line grid-level-{level}")" />
			<line y1="@(-gridSide)" y2="@gridSide" x1="@coord" x2="@coord" class="@($"grid-line grid-level-{level}")" />
		}

		@foreach (var p in Galaxy.Planets)
		{
			<circle cx="@p.Position.X" cy="@p.Position.Y" r="1.5" class="planet" />
		}

		@ChildContent

	</SvgBox>
}

@code
{
	private IEnumerable<(int, int)> GetGridLines()
	{
		yield return (-gridSide * 3 / 4, 3);
		yield return (-gridSide / 4, 3);
		yield return (-gridSide / 2, 2);
		yield return (0, 1);
		yield return (gridSide / 2, 2);
		yield return (gridSide / 4, 3);
		yield return (gridSide * 3 / 4, 3);
	}

	int gridMid => 0;
	int gridSide => Galaxy.Size / 2;

	SvgBox.Focus focus = new SvgBox.Focus() { View = Vector.Zero };

	[Parameter]
	public Galaxy Galaxy { get; set; }

	[Parameter]
	public RenderFragment ChildContent { get; set; }

	[Parameter]
	public EventCallback<Planet> OnPlanetSelected { get; set; }

	private async Task TargetObject(SvgBox.SvgMouseEventArgs e)
	{
		var pos = new Position((int)e.SvgCoords.X, (int)e.SvgCoords.Y);
		var target = Galaxy.ClosestPlanet(pos);
		await OnPlanetSelected.InvokeAsync(target);
	}
}
