@inherits LayerBase

<style>
	.planet {
		fill: rgb(20,40,40);
	}

	.planet-scanned {
		fill: rgb(40,80,80);
	}

	.planet-occupied {
		fill: rgb(240,0,0);
	}

	.planet-owned {
		fill: rgb(50,240,50);
	}

	.selected {
		stroke: gold;
		stroke-width: 0.5px;
	}

	.hab-bad {
		fill: red;
	}
	.hab-ok {
		fill: orange;
	}
	.hab-good {
		fill: yellow;
	}
	.hab-great {
		fill: green;
	}

	@foreach (var cls in GetDiploClasses())
	{
		<text>@cls</text>
	}
</style>

@if (Galaxy != null && IsEnabled)
{
	@foreach (var p in Galaxy.Planets)
	{
		<circle cx="@p.Position.X" cy="@p.Position.Y" r="@GetRadiusStr(2)" class="@GetClass(p)" />

		@if (p.Settlement != null && UIWrapper.RenderSettings.MainMode == UiDisplayMode.PlanetValue)
		{
			var side = GetRadius(3);
			<rect x="@p.Position.X" y="@Str(p.Position.Y - side)" width="@Str(side)" height="@Str(side)" class="@GetStdClass(p)" />
		}
	}
}

@code
{
	private string GetClass(IPlanet planet)
	{
		bool isSelected = UIWrapper.Selection.IsSelected(planet);

		string baseClass = UIWrapper.RenderSettings.MainMode switch
		{
			UiDisplayMode.PlanetValue => GetValueClass(planet),
			UiDisplayMode.Diplo => GetDiploClass(planet),
			_ => GetStdClass(planet),
		};

		return baseClass + (isSelected ? " selected" : "");
	}

	string GetStdClass(IPlanet planet)
	{
		if (planet.Settlement != null)
		{
			return planet.Settlement.IsMine ? "planet-owned" : "planet-occupied";
		}

		if (planet.Details != null)
		{
			return "planet-scanned";
		}

		return "planet";
	}

	string GetValueClass(IPlanet planet)
	{
		var planetValue = GameWrapper.Client.Player.GetPlanetValue(planet);

		if (planetValue == null)
		{
			return "planet";
		}
		else if (planetValue <= 0)
		{
			return "hab-bad";
		}
		else if (planetValue <= 0.45)
		{
			return "hab-ok";
		}
		else if (planetValue <= 0.70)
		{
			return "hab-good";
		}
		else
		{
			return "hab-great";
		}
	}

	string GetDiploClass(IPlanet planet)
	{
		if (planet.Settlement != null)
		{
			return $"diplo-{planet.Settlement.OwnerId}";
		}

		if (planet.Details != null)
		{
			return "planet-scanned";
		}

		return "planet";
	}

	private IEnumerable<string> GetDiploClasses()
	{
		string[] colors = { "DeepPink", "Turquoise", "Gold", "Maroon", "DarkOrange", "DodgerBlue", "Purple", "DarkCyan" };

		return GameWrapper.Client.Players
			.Zip(colors, (player, color) => $".diplo-{player.Id} {{ fill: {color} }}");
	}

	private string GetRadiusStr(double startValue)
	{
		var radius = GetRadius(startValue);
		return Str(radius);
	}

	private double GetRadius(double startValue)
	{
		return (startValue / Math.Pow(Zoom, 0.5));
	}

	private string Str(double value)
	{
		return Math.Round(value, 2).ToString(CultureInfo.InvariantCulture);
	}
}
