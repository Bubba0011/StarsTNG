@inherits LayerBase

<style>
	.own-fleet-in-orbit {
		stroke: blue;
		stroke-width: 0.5px;
		fill: none;
	}

	.op-fleet-in-orbit {
		stroke: red;
		stroke-width: 0.5px;
		fill: none;
	}

	.own-fleet-in-space {
		stroke: darkblue;
		stroke-width: 0.2px;
		fill: blue;
	}

	.op-fleet-in-space {
		stroke: darkred;
		stroke-width: 0.2px;
		fill: red;
	}

	.selected {
		stroke: gold;
	}

	.waypoint-line {
		fill: none;
		stroke: blue;
		stroke-width: 0.5px;
	}

	.waypoint {
		fill: none;
		stroke: blue;
		stroke-width: 0.2px;
	}
</style>

<defs>
	<g id="fleet-in-space">
		<polygon points="2,0 -1,2 0,0 -1,-2" />
	</g>
</defs>

@foreach (var fleet in Galaxy.Fleets)
{
	if (fleet.IsMine && fleet.Waypoints.Any())
	{
		var path = string.Join(" ", GetWaypoints(fleet, true));

		<polyline points="@path" class="waypoint-line" />

		@foreach (var waypoint in fleet.Waypoints)
		{
			var wp = waypoint.Position;
			<circle cx="@wp.X" cy="@wp.Y" r="1" class="waypoint" />
		}
	}

	var pos = fleet.Position;

	@if (InOrbit(fleet))
	{
		<circle cx="@pos.X" cy="@pos.Y" r="4" class="@GetClass(fleet)" />
	}
	else
	{
		<use href="#fleet-in-space"
			  x="@pos.X"
			  y="@pos.Y"
			  transform="@GetFleetTransform(fleet)"
			  class="@GetClass(fleet)" />
	}
}

@code
{
	private bool InOrbit(IFleet fleet)
	{
		return Galaxy.Planets.Any(p => p.Position == fleet.Position);
	}

	private IEnumerable<string> GetWaypoints(IFleet fleet, bool includeCurrentPosition)
	{
		static string S(Position p) => $"{p.X},{p.Y}";

		if (fleet.Waypoints.Any())
		{
			if (includeCurrentPosition)
			{
				yield return S(fleet.Position);
			}

			foreach (var p in fleet.Waypoints)
			{
				yield return S(p.Position);
			}
		}
	}

	private string GetFleetTransform(IFleet fleet)
	{
		return $"rotate({fleet.Velocity?.Heading ?? 0}, {fleet.Position.X}, {fleet.Position.Y})";
	}

	private string GetClass(IFleet fleet)
	{
		string result;

		if (InOrbit(fleet))
		{
			result = fleet.IsMine ? "own-fleet-in-orbit" : "op-fleet-in-orbit";
		}
		else
		{
			result = fleet.IsMine ? "own-fleet-in-space" : "op-fleet-in-space";
		}

		bool isSelected = UIWrapper.Selection.IsSelected(fleet);

		return result + (isSelected ? " selected" : "");
	}
}
