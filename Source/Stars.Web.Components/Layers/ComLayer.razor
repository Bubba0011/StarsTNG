@inherits LayerBase

<style>
	.com-link-0 {
		stroke: grey;
		stroke-width: 0.25px;
		stroke-dasharray: 1 3;
	}

	.com-link-1 {
		stroke: white;
		stroke-width: 0.4px;
		stroke-dasharray: 2 2;
	}

	.com-caption {
		fill: white;
		text-anchor: middle;
		font-size: @(GetRadiusStr(6) + "px");
	}
</style>

@if (Galaxy != null && IsEnabled)
{
	@foreach (var link in GetLinks())
	{
		<line x1="@link.Free.X" y1="@link.Free.Y" x2="@link.Tree.X" y2="@link.Tree.Y" class="@($"com-link-{link.Cap}")" />
	}

	@if (Zoom >= 2)
	{ 
		foreach (var planet in MyPlanets())
		{
			var pos = planet.Position;
			var caption = GetCaption(planet);

			<text>
				<text x="@pos.X" y="@Str(pos.Y + GetRadius(10))" class="com-caption">@caption</text>
			</text>
		}
	}
}

@code
{
	private List<ComLink> cache;
	private SpaceTime cacheTime;

	private string GetCaption(IPlanet planet)
	{
		var population = planet.Settlement!.Population;
		return S(population.Civilians) + (population.Marines > 0 ? $" + {S(population.Marines)}" : null);

		static string S(int n) => n.ToString("### ### ##0").Trim();
	}

	private IEnumerable<IPlanet> MyPlanets()
	{
		return Galaxy.Planets.Where(p => p.Settlement?.IsMine == true);
	}

	private IEnumerable<ComLink> GetLinks()
	{
		if (cache == null || cacheTime != GameWrapper.Client.CurrentTime)
		{
			cache = GenerateLinks().ToList();
			cacheTime = GameWrapper.Client.CurrentTime;
		}

		return cache;
	}

	private IEnumerable<ComLink> GenerateLinks()
	{
		var spacePorts = MyPlanets().Where(p => p.Settlement.Installations.SpacePort > 0).ToArray();

		foreach (var link in MinimumSpanningTree(spacePorts.Select(p => p.Position), (a, b) => true))
		{
			var tmp = link;
			tmp.Cap = 1;
			yield return tmp;
		}

		var noPorts = MyPlanets().Where(p => p.Settlement.Installations.SpacePort <= 0).ToArray();

		foreach (var nope in noPorts)
		{
			var hub = spacePorts
				.OrderBy(p => p.Position.DistanceTo(nope.Position))
				.FirstOrDefault();

			if (hub != null)
			{
				yield return new ComLink
				{
					Free = nope.Position,
					Tree = hub.Position,
				};
			}
		}
	}

	private IEnumerable<ComLink> GenerateLinksOld()
	{
		return MinimumSpanningTree(MyPlanets().Select(p => p.Position), (a,b) => true);
	}

	private IEnumerable<ComLink> MinimumSpanningTree(IEnumerable<Position> nodes, Func<Position, Position, bool> areLinked)
	{
		List<Position> tree = new List<Position>();
		List<Position> free = nodes.ToList();

		if (!free.Any()) yield break;

		var seed = free.First();
		free.Remove(seed);
		tree.Add(seed);

		while (free.Count > 0)
		{
			var next = Fringes()
				.OrderBy(fringe => fringe.Distance)
				.First();

			free.Remove(next.Free);
			tree.Add(next.Free);

			yield return next;
		}

		IEnumerable<ComLink> Fringes()
		{
			return free.SelectMany(f => tree.Where(t => areLinked(f, t)).Select(t => new ComLink { Free = f, Tree = t }));
		}
	}

	private string GetRadiusStr(double startValue)
	{
		var radius = GetRadius(startValue);
		return Str(radius);
	}

	private double GetRadius(double startValue)
	{
		return (startValue / Math.Pow(Zoom, 0.5));
	}

	private string Str(double value)
	{
		return Math.Round(value, 2).ToString(CultureInfo.InvariantCulture);
	}

	struct ComLink
	{
		public Position Free { get; set; }
		public Position Tree { get; set; }
		public int Cap { get; set; }
		public double Distance => Free.DistanceTo(Tree);
	}
}
