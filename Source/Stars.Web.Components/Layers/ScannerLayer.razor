<style>
	.my-scanner {
		fill: rgba(60, 20, 20, 0.75);
		clip-path: url(#clippy);
	}

	.op-scanner {
		fill: rgba(20, 20, 60, 0.75);
		clip-path: url(#clippy);
	}
</style>

@if (IsEnabled && Galaxy != null)
{
	<clipPath id="clippy">
		<rect x="@Galaxy.Bounds.Min" y="@Galaxy.Bounds.Min" width="@Galaxy.Bounds.Size" height="@Galaxy.Bounds.Size" />
	</clipPath>

	@foreach (var site in GetScannerSites(false))
	{
		<circle cx="@site.X" cy="@site.Y" r="@site.R" class="op-scanner" />
	}

	@foreach (var site in GetScannerSites(true))
	{
		<circle cx="@site.X" cy="@site.Y" r="@site.R" class="my-scanner" />
	}
}

@code
{
	[Parameter]
	public IGalaxy Galaxy { get; set; }

	[Parameter]
	public bool IsEnabled { get; set; } = true;

	IEnumerable<ScannerSite> GetScannerSites(bool owned)
	{
		return Galaxy.Planets
			.Where(Planet => Planet.Settlement?.IsMine == owned)
			.Where(planet => planet.Settlement?.ScannerRange > 0)
			.Select(planet => new ScannerSite(planet));
	}

	struct ScannerSite
	{
		public int X;
		public int Y;
		public int R;

		public ScannerSite(IPlanet planet)
		{
			X = planet.Position.X;
			Y = planet.Position.Y;
			R = planet.Settlement.ScannerRange;
		}
	}
}
