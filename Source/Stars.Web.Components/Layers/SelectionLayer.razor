@inject IJSRuntime JSRuntime

<style>
	.planet-marker {
		stroke: rgb(250, 100, 0);
		fill: none;
	}
</style>

@if (SelectedPlanet != null)
{
	<circle cx="@SelectedPlanet.Position.X" cy="@SelectedPlanet.Position.Y" r="@GetRadius(6)" stroke-width="@(GetStrokeWidth(4))" class="planet-marker" />
}

@code 
{
	private double zoom { get; set; } = 1.0;

	[Parameter]
	public IPlanet SelectedPlanet { get; set; }

	[Parameter]
	public EventCallback<IPlanet> SelectedPlanetChanged { get; set; }

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			var reference = DotNetObjectReference.Create(this);
			await JSRuntime.BindCallbackMethod(reference, "selectionLayer", "zoomEvent");
		}
	}

	private string GetRadius(double startValue)
	{
		var radius = (startValue / Math.Pow(zoom, 0.5)).ToString(CultureInfo.InvariantCulture);
		return radius;
	}

	private string GetStrokeWidth(double startValue)
	{
		return (Double.Parse(GetRadius(startValue), CultureInfo.InvariantCulture) * 0.2).ToString(CultureInfo.InvariantCulture);
	}

	[JSInvokable("ZoomCallback")]
	public void ZoomChanged(string zoomFactor)
	{
		double zoomDouble = 1.0;
		Double.TryParse(zoomFactor, NumberStyles.Any, CultureInfo.InvariantCulture, out zoomDouble);

		zoom = 1 / zoomDouble;

		StateHasChanged();
	}
}
