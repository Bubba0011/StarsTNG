@inherits PanelBase

<style>
	.waypoint-item {
		display: flex;
		cursor: pointer;
		align-items: center;
		margin: 2px;
	}

		.waypoint-item:hover {
			background-color: rgba(255,255,255,0.2);
		}

	.wp-cell {
		margin: 2px 4px;
		width: 90px;
	}
</style>

@if (Fleet != null)
{
	<p><b>Owner</b> @GetPlayerName(Fleet.OwnerId)</p>
	<p><b>Scanner Range</b> @Fleet.ScannerRange</p>
	@if (Fleet.Passengers?.Total > 0)
	{
		<p><b>Passengers</b> @Fleet.Passengers</p>
	}

	@if (Fleet is IFleetController ctrl)
	{
		<div>
			<b>Waypoints</b>
			@foreach (var wp in GetWaypoints())
			{
				<div class="waypoint-item">
					<div class="wp-cell" style="width:30px;">#@wp.Id</div>
					<div class="wp-cell">XY: @wp.Target</div>
					<div class="wp-cell">Dist: @Math.Round(wp.Distance, 0) ly</div>
					<div class="wp-cell">Eta: @wp.ETA</div>
					<Icon Name="IconName.ClearSearch" @onclick="@(() => DeleteWaypoint(wp.Id))" Style="margin:2px;" />
				</div>
			}
		</div>

		<Button Size="ButtonSize.Small" Color="Color.Danger" Clicked="ClearFleetWaypoints" Disabled="!Fleet.Waypoints.Any()">Clear WPs</Button>
		<Button Size="ButtonSize.Small" Color="Color.Primary" Clicked="AddFleetWaypoint">@(InClickMode ? "Done" : "Add WPs")</Button>
	}
}

@code
{
	[Parameter]
	public IFleet Fleet { get; set; }

	private bool InClickMode => UIWrapper.InClickMode;

	private string GetPlayerName(int playerId)
	{
		var player = GameWrapper.Client.Players.SingleOrDefault(p => p.Id == playerId);
		return player?.Name ?? $"Player #{playerId}";
	}

	private void ClearFleetWaypoints()
	{
		if (Fleet is IFleetController ctrl)
		{
			ctrl.SetWaypoints(null);
			GameWrapper.Client.ModelUpdated();
		}
	}

	private void AddFleetWaypoint()
	{
		if (Fleet is IFleetController fleet)
		{
			UIWrapper.InClickMode = !UIWrapper.InClickMode;
		}
	}

	private void DeleteWaypoint(int itemId)
	{
		if (Fleet is IFleetController ctrl)
		{
			var newList = Fleet.Waypoints.ToList();
			newList.RemoveAt(itemId - 1);
			ctrl.SetWaypoints(newList);
			GameWrapper.Client.ModelUpdated();
		}
	}

	private IEnumerable<WaypointItem> GetWaypoints()
	{
		const double speed = 49;

		int id = 0;
		Position lastPos = Fleet.Position;
		int totTime = 0;

		foreach (var wp in Fleet.Waypoints)
		{
			var distance = lastPos.DistanceTo(wp);
			var eta = (int)Math.Ceiling(distance / speed);
			totTime += eta;
			lastPos = wp;
			id++;

			yield return new WaypointItem
			{
				Id = id,
				Target = wp,
				Distance = distance,
				ETA = totTime,
			};
		}
	}

	struct WaypointItem
	{
		public int Id { get; set; }
		public Position Target { get; set; }
		public double Distance { get; set; }
		public int ETA { get; set; }
	}
}
