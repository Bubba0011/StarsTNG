@inject IJSRuntime JSRuntime

<svg class="@CssClass"
	 viewBox="@ViewBox"
	 @onmousedown="HandleMouseDownEvent"
	 @onclick="HandleClickEvent"
	 @oncontextmenu:preventDefault
	 @oncontextmenu="@(e => null)"
	 @ref="svgRef">
	@ChildContent
</svg>
@code
{
	private ElementReference svgRef;

	public string ViewBox { get; set; }
	[Parameter]
	public RenderFragment ChildContent { get; set; }

	[Parameter]
	public string CssClass { get; set; }

	[Parameter]
	public Focus FocusOn { get; set; }

	[Parameter]
	public EventCallback<SvgMouseEventArgs> OnClick { get; set; }

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await JSRuntime.ResetUI();
			await JSRuntime.BindWheelEvent(svgRef);
			ViewBox = await GetViewBoxAsync();
			StateHasChanged();
		}
	}

	private async Task<string> GetViewBoxAsync()
	{
		var screen = await JSRuntime.GetScreenSize<Vector>("mejn");
		var screenRect = new Rectangle()
		{
			TopLeft = Vector.Zero,
			Dimensions = new Vector(screen.X, screen.Y),
		};

		var viewBox = screenRect;

		if (FocusOn.View.HasValue)
		{
			var screenFocus = FocusOn.Screen ?? screenRect.Center;
			viewBox.TopLeft = FocusOn.View.Value - screenFocus;
		}

		return viewBox.ToString();
	}

	private async Task HandleClickEvent(MouseEventArgs e)
	{
		if (OnClick.HasDelegate)
		{
			var args = new SvgMouseEventArgs()
			{
				ScreenCoords = await JSRuntime.GetPositionFromCorner<Vector>(svgRef, e),
				SvgCoords = await JSRuntime.GetElementPosition<Vector>(svgRef, e)
			};

			await OnClick.InvokeAsync(args);
		}
	}

	// Handled in Javascript entirely
	private async Task HandleMouseDownEvent(MouseEventArgs e)
	{
		await JSRuntime.OnMouseDown(e);
	}

	public struct Focus
	{
		public Vector? View { get; set; }
		public Vector? Screen { get; set; }
	}

	public class SvgMouseEventArgs : EventArgs
	{
		public Vector SvgCoords { get; set; }
		public Vector ScreenCoords { get; set; }
	}

	public class SvgWheelEventArgs : SvgMouseEventArgs
	{
		public double WheelDelta { get; set; }
		public double ZoomFactor { get; set; }
	}
}
