@page "/game/{GameId:int}/{PlayerId:int}"

@inject IJSRuntime JSRuntime
@inject GameServerService GameServers

@implements IDisposable

<style>
	.main-container {
		position: relative;
		width: 100%;
		height: 100vh;
	}

	.setup-container {
		margin: 5px;
	}

	.small-font {
		font-size: small;
	}
</style>

<div>
	<div class="main-container" id="mejn">
		@if (client != null)
		{
			<UiGalaxy GameWrapper="wrapper" @bind-SelectedObject="selectedObject" InAutoSelectMode="!inClickMode" Clicked="GalaxyClicked" />

			@if (selectedObject is IPlanet planet)
			{
				<PlanetInfoPanel Planet="planet" IsEnabled="true" Player="@Player" />
			}
			else if (selectedObject is IFleet fleet)
			{
				<InfoPanel Position="bottom left">
					@fleet.Name

					@if (fleet is IFleetController ctrl)
					{
						<Button Clicked="ClearFleetWaypoints">Clear WPs</Button>
						<Button Clicked="AddFleetWaypoint">@(inClickMode ? "Done" : "Add WP")</Button>
					}
				</InfoPanel>
			}

			<InfoPanel Position="top left" OnClicked="client.SetReadyFlag">
				<div>Turn: @client.CurrentTurn</div>
				<div>ETA: @client.TriggerStatus</div>
			</InfoPanel>
		}
	</div>
</div>

@code
{
	// Model
	private GameWrapper wrapper;
	private GameClient client => wrapper.Client;
	private IGalaxy Galaxy => client.GalaxyView;
	private IPlayer Player => Galaxy.Players.SingleOrDefault(p => p.Id == PlayerId);

	// Selection
	private ISpaceObject selectedObject;
	private bool inClickMode;

	[Parameter]
	public int GameId { get; set; }

	[Parameter]
	public int PlayerId { get; set; }

	protected override void OnInitialized()
	{
		wrapper = new GameWrapper();
		wrapper.Client = GameServers.GetGameClient(GameId, PlayerId);
		wrapper.Client.GameUpdated += GameUpdated;
		wrapper.Client.TriggerUpdated += TriggerUpdated;
	}

	public void Dispose()
	{
		if (client != null)
		{
			client.TriggerUpdated -= TriggerUpdated;
			client.GameUpdated -= GameUpdated;
			client.Dispose();
		}
	}

	private void Update()
	{
		if (selectedObject != null)
		{
			selectedObject = Galaxy.GetSpaceObject(selectedObject.ObjectId);
		}

		StateHasChanged();
	}

	private void GameUpdated(object sender, EventArgs e)
	{
		InvokeAsync(Update);
	}

	private void TriggerUpdated(object sender, EventArgs e)
	{
		InvokeAsync(Update);
	}

	private void ClearFleetWaypoints()
	{
		if (selectedObject is IFleetController ctrl)
		{
			ctrl.SetWaypoints(null);
		}
	}

	private void AddFleetWaypoint()
	{
		if (selectedObject is IFleetController fleet)
		{
			inClickMode = !inClickMode;
		}
	}

	private void GalaxyClicked(SvgMouseEventArgs e)
	{
		if (selectedObject is IFleetController fleet)
		{
			int Round(double d) => (int)Math.Round(d);

			var x = Round(e.SvgCoords.X);
			var y = Round(e.SvgCoords.Y);
			var pos = new Position(x, y);

			var closestObject = Galaxy.ClosestSpaceObject(pos);
			if (pos.DistanceTo(closestObject.Position) < 2.5)
			{
				pos = closestObject.Position;
			}

			var list = fleet.Waypoints.ToList();
			list.Add(pos);

			fleet.SetWaypoints(list);
		}
	}
}
