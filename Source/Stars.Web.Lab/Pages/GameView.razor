@page "/game/{GameId:int}/{PlayerId:int}"
@inject GameServerService GameServers
@implements IDisposable

<style>
	.main-container {
		position: relative;
		width: 100%;
		height: 100vh;
	}
</style>

<div class="main-container" id="mejn">
	@if (client != null)
	{
		<CascadingValue Name="GameWrapper" Value="@wrapper">
			<CascadingValue Name="UIWrapper" Value="@uiWrapper">

				<UiGalaxy Clicked="GalaxyClicked" />

				<InfoSpace Position="top right">
					<InfoPanel Title="Game State">
						<div>Time: @client.CurrentTime</div>
						<div>ETA: @client.TriggerStatus</div>
						<div @onclick="ToggleDisplayMode">Display Mode: @uiWrapper.RenderSettings.MainMode</div>
						<Button Size="ButtonSize.Small" Color="Color.Primary" Clicked="client.SetReadyFlag">Ready</Button>
					</InfoPanel>

					<ScoreboardPanel />
				</InfoSpace>
				
				<InfoSpace Position="top left">
					<SelectionPanel />
				</InfoSpace>

				<InfoSpace Position="bottom right">
					<MessagePanel ItemClicked="MessageClicked" />
				</InfoSpace>

			</CascadingValue>
		</CascadingValue>
	}
</div>

@code
{
	private UIWrapper uiWrapper = new UIWrapper();
	private GameWrapper wrapper;
	private Selection selection => uiWrapper.Selection;
	private GameClient client => wrapper.Client;
	private IGalaxy Galaxy => client.GalaxyView;

	[Parameter]
	public int GameId { get; set; }

	[Parameter]
	public int PlayerId { get; set; }

	protected override void OnInitialized()
	{
		wrapper = new GameWrapper();
		wrapper.Client = GameServers.GetGameClient(GameId, PlayerId);
		wrapper.Client.GameUpdated += GameUpdated;
		wrapper.Client.TriggerUpdated += TriggerUpdated;

		uiWrapper.StateChanged += (s, e) => StateHasChanged();
		selection.StateChanged += (s, e) => StateHasChanged();
	}

	public void Dispose()
	{
		if (client != null)
		{
			client.TriggerUpdated -= TriggerUpdated;
			client.GameUpdated -= GameUpdated;
			client.Dispose();
		}
	}

	private void Update()
	{
		selection.Refresh(Galaxy);
		StateHasChanged();
	}

	private void GameUpdated(object sender, EventArgs e)
	{
		InvokeAsync(Update);
	}

	private void TriggerUpdated(object sender, EventArgs e)
	{
		InvokeAsync(Update);
	}

	private void GalaxyClicked(SvgMouseEventArgs e)
	{
		if (selection.SelectedObject is IFleetController fleet)
		{
			int Round(double d) => (int)Math.Round(d);

			var x = Round(e.SvgCoords.X);
			var y = Round(e.SvgCoords.Y);
			var pos = new Position(x, y);

			var closestObject = Galaxy.ClosestSpaceObject(pos);
			if (pos.DistanceTo(closestObject.Position) < 2.5)
			{
				pos = closestObject.Position;
			}

			var waypoint = new Waypoint(pos);
			var list = fleet.Waypoints.ToList();
			list.Add(waypoint);

			fleet.SetWaypoints(list);
		}
	}

	private void MessageClicked(Message message)
	{
		var obj = Galaxy.GetSpaceObject(message.ObjectId);
		selection.TargetObject(Galaxy, obj);
	}

	private void ToggleDisplayMode()
	{
		uiWrapper.RenderSettings = uiWrapper.RenderSettings.Toggle();
	}
}
