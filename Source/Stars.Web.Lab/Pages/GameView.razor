@page "/game/{GameId:int}/{PlayerId:int}"

@inject IJSRuntime JSRuntime
@inject GameServerService GameServers

@implements IDisposable

<style>
	.main-container {
		position: relative;
		width: 100%;
		height: 100vh;
	}

	.setup-container {
		margin: 5px;
	}

	.small-font {
		font-size: small;
	}

	.obj-item {
		cursor: pointer;
	}

		.obj-item:hover {
			background-color: rgba(255,255,255,0.5);
		}

	.selected {
		font-weight: bold;
	}
</style>

<div>
	<div class="main-container" id="mejn">
		@if (client != null)
		{
			<CascadingValue Name="GameWrapper" Value="@wrapper">
				<UiGalaxy @bind-Selection="selection" InAutoSelectMode="!inClickMode" Clicked="GalaxyClicked" DisplayMode="displayMode" />

				<InfoSpace Position="top right">
					<InfoPanel Title="Game State">
						<div>Turn: @client.CurrentTurn</div>
						<div>ETA: @client.TriggerStatus</div>
						<div @onclick="ToggleDisplayMode">Display Mode: @displayMode</div>
						<Button Size="ButtonSize.Small" Color="Color.Primary" Clicked="client.SetReadyFlag">Ready</Button>
					</InfoPanel>
					@if (client.Scoreboard.Any())
					{
						<InfoPanel Title="Scoreboard">
							@foreach (var item in client.Scoreboard)
							{
								<div>@($"{item.PlayerName}: {item.Score:### ##0} pts")</div>
							}
						</InfoPanel>
					}
				</InfoSpace>

				@if (selection.SelectedObject != null)
				{
					<InfoSpace Position="top left">
						@if (selection.Objects?.Count() > 1)
						{
							<InfoPanel Title="Objects at Location">
								@foreach (var obj in selection.Objects)
								{
									string cls = "obj-item" + (selection.IsSelected(obj) ? " selected" : "");
									<div class="@cls" @onclick="@(() => Select(obj.ObjectId))">@obj.ObjectId</div>
								}
							</InfoPanel>
						}

						<InfoPanel Title="@GetSelectionTitle()">
							@if (selection.SelectedObject is IPlanet planet)
							{
								<PlanetInfoPanel Planet="planet" IsEnabled="true" />
							}
							else if (selection.SelectedObject is IFleet fleet)
							{
								<FleetPanel Fleet="fleet" @bind-InClickMode="inClickMode" ModelChanged="() => StateHasChanged()" />
							}
						</InfoPanel>
					</InfoSpace>
				}
				</CascadingValue>
			}
		</div>
</div>

@code
{
	// UI
	private UiDisplayMode displayMode = UiDisplayMode.Default;

	// Model
	private GameWrapper wrapper;
	private GameClient client => wrapper.Client;
	private IGalaxy Galaxy => client.GalaxyView;

	// Selection
	private Selection selection;
	private bool inClickMode;

	[Parameter]
	public int GameId { get; set; }

	[Parameter]
	public int PlayerId { get; set; }

	protected override void OnInitialized()
	{
		wrapper = new GameWrapper();
		wrapper.Client = GameServers.GetGameClient(GameId, PlayerId);
		wrapper.Client.GameUpdated += GameUpdated;
		wrapper.Client.TriggerUpdated += TriggerUpdated;
	}

	public void Dispose()
	{
		if (client != null)
		{
			client.TriggerUpdated -= TriggerUpdated;
			client.GameUpdated -= GameUpdated;
			client.Dispose();
		}
	}

	private void Update()
	{
		selection = selection.Refresh(Galaxy);
		StateHasChanged();
	}

	private void GameUpdated(object sender, EventArgs e)
	{
		InvokeAsync(Update);
	}

	private void TriggerUpdated(object sender, EventArgs e)
	{
		InvokeAsync(Update);
	}

	private void GalaxyClicked(SvgMouseEventArgs e)
	{
		if (selection.SelectedObject is IFleetController fleet)
		{
			int Round(double d) => (int)Math.Round(d);

			var x = Round(e.SvgCoords.X);
			var y = Round(e.SvgCoords.Y);
			var pos = new Position(x, y);

			var closestObject = Galaxy.ClosestSpaceObject(pos);
			if (pos.DistanceTo(closestObject.Position) < 2.5)
			{
				pos = closestObject.Position;
			}

			var list = fleet.Waypoints.ToList();
			list.Add(pos);

			fleet.SetWaypoints(list);
		}
	}

	private void ToggleDisplayMode()
	{
		displayMode = displayMode == UiDisplayMode.Default
			? UiDisplayMode.PlanetValue
			: UiDisplayMode.Default;
	}

	private void Select(string objectId)
	{
		selection = selection.SelectObject(objectId);
	}

	private string GetSelectionTitle()
	{
		if (selection.SelectedObject is IPlanet planet)
		{
			return "Planet - " + (planet.Name ?? $"#{planet.Id}") + $" ({selection.SelectedObject.Position})";
		}
		else if (selection.SelectedObject is IFleet fleet)
		{
			return "Fleet - " + (fleet.Name ?? $"# {fleet.Id}") + $" ({selection.SelectedObject.Position})";
		}

		return $"Unknown object ({selection.SelectedObject.Position})";
	}
}
