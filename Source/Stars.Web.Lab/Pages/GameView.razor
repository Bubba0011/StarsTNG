@page "/game/{GameId:int}/{PlayerId:int}"

@inject IJSRuntime JSRuntime
@inject GameServerService GameServers

@implements IDisposable

<style>
	.main-container {
		position: relative;
		width: 100%;
		height: 100vh;
	}

	.setup-container {
		margin: 5px;
	}

	.small-font {
		font-size: small;
	}
</style>

<div>
	<div class="main-container" id="mejn">
		@if (client != null)
		{
			<UiGalaxy Galaxy="Galaxy" @bind-SelectedPlanet="selectedPlanet" />
			
			<PlanetInfoPanel Planet="selectedPlanet" IsEnabled="true" />
			<!--<TurnOrderPanel Game="game" PlayerId="playerId" OnNextTurn="NextTurn" OnNextPlayer="NextPlayer" IsEnabled="true" />-->
			
			<InfoPanel Position="top left" OnClicked="client.SetReadyFlag">
				<div>Turn: @client.CurrentTurn</div>
				<div>ETA: @client.TriggerStatus</div>
			</InfoPanel>
		}
	</div>
</div>

@code
{
	// Model
	private GameClient client;
	private IGalaxy Galaxy => client.GalaxyView;

	// Selection
	private IPlanet selectedPlanet;

	[Parameter]
	public int GameId { get; set; }

	[Parameter]
	public int PlayerId { get; set; }

	protected override void OnInitialized()
	{
		client = GameServers.GetGameClient(GameId, PlayerId);
		client.GameUpdated += GameUpdated;
		client.TriggerUpdated += TriggerUpdated;
	}

	public void Dispose()
	{
		if (client != null)
		{
			client.TriggerUpdated -= TriggerUpdated;
			client.GameUpdated -= GameUpdated;
			client.Dispose();
		}
	}

	private void Update()
	{
		if (selectedPlanet != null)
		{
			selectedPlanet = Galaxy.Planets.Single(p => p.Id == selectedPlanet.Id);
		}

		StateHasChanged();
	}

	private void GameUpdated(object sender, EventArgs e)
	{
		InvokeAsync(Update);
	}

	private void TriggerUpdated(object sender, EventArgs e)
	{
		InvokeAsync(Update);
	}
}
