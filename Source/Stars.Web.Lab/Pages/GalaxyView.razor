@page "/galaxy"

@using Stars.Core
@using Stars.Core.Setup

<UiGalaxy Galaxy="galaxy" OnPlanetSelected="p => selectedPlanet = p">
	<circle cx="@stats.Center.X" cy="@stats.Center.Y" r="15" stroke="blue" fill="transparent" />
	<circle cx="@stats.MinPlanet.Position.X" cy="@stats.MinPlanet.Position.Y" r="10" stroke="green" fill="transparent" />
	<circle cx="@stats.MaxPlanet.Position.X" cy="@stats.MaxPlanet.Position.Y" r="10" stroke="red" fill="transparent" />

	@if (selectedPlanet != null)
	{
		<circle cx="@selectedPlanet.Position.X" cy="@selectedPlanet.Position.Y" r="5" stroke="yellow" fill="transparent" />
	}
</UiGalaxy>

@if (selectedPlanet != null)
{
<div style="display: inline-block;">
	<h5>Planet #@selectedPlanet.Id</h5>
	<p><b>Position</b> @selectedPlanet.Position.X, @selectedPlanet.Position.Y</p>
	<p><b>Environment</b> @selectedPlanet.Details.Environment</p>
	<p><b>Minerals</b> @selectedPlanet.Details.Minerals</p>
</div>
}

<div>
	<h5>Closest Neighbor</h5>
	<div>Min: @stats.Min ly</div>
	<div>Max: @stats.Max ly</div>
	<div>Avg: @stats.Avg ly</div>
</div>

<div>
	Galaxy Size:<input @bind-value="settings.GalaxySize" />
	Min. Distance:<input @bind-value="settings.MinimumDistanceBetweenPlanets" />
	Planets:<input @bind-value="settings.PlanetCount" />
	<button @onclick="Generate">Generate New Galaxy</button>
</div>

@if (errorMessage != null)
{
	<div style="color: red">@errorMessage</div>
}

@code
{
	private GalaxyGeneratorSettings settings = new GalaxyGeneratorSettings();
	private Galaxy galaxy;
	private GalaxyStats stats;
	private string errorMessage;
	private Planet selectedPlanet;

	protected override void OnInitialized()
	{
		Generate();
	}

	private void Generate()
	{
		errorMessage = null;
		selectedPlanet = null;
		var generator = new GalaxyGenerator();

		try
		{
			galaxy = generator.Generate(settings);
			stats = GetStats(galaxy);
		}
		catch (Exception ex)
		{
			errorMessage = "Error: " + ex.Message;
		}
	}

	private static GalaxyStats GetStats(Galaxy galaxy)
	{
		var stats = new GalaxyStats();

		// Center of galaxy
		var pts = galaxy.Planets.Select(planet => planet.Position);
		var cx = Round(pts.Average(p => p.X));
		var cy = Round(pts.Average(p => p.Y));
		stats.Center = new Position(cx, cy);

		// Distance to closest neighbor
		var closestNeighborDistances = galaxy.Planets
			.Select(planet => Closest(planet, galaxy.Planets))
			.ToList();

		var min = closestNeighborDistances.Min();
		var max = closestNeighborDistances.Max();

		stats.Min = Round(min);
		stats.Max = Round(max);
		stats.Avg = Round(closestNeighborDistances.Average());

		var iMin = closestNeighborDistances.IndexOf(min);
		var iMax = closestNeighborDistances.IndexOf(max);

		stats.MinPlanet = galaxy.Planets[iMin];
		stats.MaxPlanet = galaxy.Planets[iMax];

		return stats;

		static int Round(double x)
		{
			return (int)Math.Round(x, 0);
		}

		static double Closest(Planet planet, IList<Planet> planets)
		{
			var minDistSqrd = planets
				.Where(p => p != planet)
				.Select(p => DistanceSquared(p.Position, planet.Position))
				.Min();

			return Math.Sqrt(minDistSqrd);

			static double DistanceSquared(Position a, Position b)
			{
				var dx = a.X - b.X;
				var dy = a.Y - b.Y;
				return dx * dx + dy * dy;
			}
		}
	}

	struct GalaxyStats
	{
		public Position Center { get; set; }

		public int Min { get; set; }
		public int Max { get; set; }
		public int Avg { get; set; }

		public Planet MinPlanet { get; set; }
		public Planet MaxPlanet { get; set; }
	}
}
