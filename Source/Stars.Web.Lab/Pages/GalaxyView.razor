@page "/galaxy"

@using Stars.Core
@using Stars.Core.Setup
@using Stars.Web.Lab.Data
@using System.Globalization 

@inject IJSRuntime JSRuntime

<style>
	.main-container {
		position: relative;
		width: 100%;
		height: 100vh;
	}

	.setup-container {
		margin: 5px;
	}

	.info-panel {
		position: absolute;
		background-color: rgba(40,60,80,0.65);
		color: white;
		border-radius: 3px;
		box-shadow: 0 0 1px 1px rgb(80,120,160);
		padding: 4px;
	}

	.top {
		top: 10px;
	}

	.bottom {
		bottom: 10px;
	}

	.left {
		left: 10px;
	}

	.right {
		right: 10px;
	}

	.planet-marker {
		stroke: rgb(250, 100, 0);
		fill: none;
	}
</style>

<div>
	<div class="main-container" id="mejn">
		<UiGalaxy Galaxy="galaxy" OnPlanetSelected="PlanetClicked" @ref="UI">
			@if (selectedPlanet != null)
			{
				<circle cx="@selectedPlanet.Position.X" cy="@selectedPlanet.Position.Y" r="5" class="planet-marker" />
			}
		</UiGalaxy>

		@if (selectedPlanet != null)
		{
			<div class="info-panel bottom left" @onclick="() => selectedPlanet = null">
				<PlanetInfoPanel Planet="selectedPlanet" />
			</div>
		}

		<div class="info-panel bottom right">
			<div id="SVGcoords"></div>
			<div id="Calccoords"></div>
			<div>Zoom: @($"{(100 * Zoom):0}%")</div>
		</div>

		<div class="info-panel top left">
			<h5>Closest Neighbor</h5>
			<div>Min: @stats.Min ly</div>
			<div>Max: @stats.Max ly</div>
			<div>Avg: @stats.Avg ly</div>
		</div>

		<div class="info-panel top right">
			<LabelBox Label="Galaxy Size">
				<input @bind-value="settings.GalaxySize" class="num-input" />
			</LabelBox>
			<LabelBox Label="Min. Distance">
				<input @bind-value="settings.MinimumDistanceBetweenPlanets" class="num-input" />
			</LabelBox>
			<LabelBox Label="Planets">
				<input @bind-value="settings.PlanetCount" id="inpPlanets" class="num-input" />
			</LabelBox>

			<button @onclick="Generate">Generate Galaxy</button>
		</div>
	</div>

	@if (errorMessage != null)
	{
		<div style="color: red">@errorMessage</div>
	}
</div>

@code
{
	private GalaxyGeneratorSettings settings = new GalaxyGeneratorSettings() { PlanetCount = 333 };
	private IGalaxy galaxy;
	private GalaxyStats stats;
	private string errorMessage;
	private IPlanet selectedPlanet;
	private UiGalaxy UI;

	private double Zoom = 1;

	protected override void OnInitialized()
	{
		Generate();
	}

	protected override void OnAfterRender(bool firstRender)
	{
		base.OnAfterRender(firstRender);

		if (firstRender)
		{
			var reference = DotNetObjectReference.Create(this);
			JSRuntime.BindCallbackMethod(reference, "galaxyView");
		}
	}

	private void PlanetClicked(IPlanet planet)
	{
		selectedPlanet = planet.Id != selectedPlanet?.Id ? planet : null;
	}

	private void Generate()
	{
		errorMessage = null;
		selectedPlanet = null;

		try
		{
			// Generate
			var generator = new GalaxyGenerator();
			var galaxy = generator.Generate(settings);

			// Populate
			galaxy.Players.Add(new Player() { Id = 1, Name = "The Federation" });
			galaxy.Players.Add(new Player() { Id = 2, Name = "The Borg" });
			galaxy.Planets.First().OwnerId = 1;
			galaxy.Planets.Last().OwnerId = 2;

			this.galaxy = new PlayerView(galaxy, 1);
			stats = GalaxyStats.Create(galaxy);
		}
		catch (Exception ex)
		{
			errorMessage = "Error: " + ex.Message;
		}
	}

	[JSInvokable("ZoomCallback")]
	public void ZoomChanged(string zoomFactor)
	{
		double zoomDouble = 1.0;
		Double.TryParse(zoomFactor, NumberStyles.Any, CultureInfo.InvariantCulture, out zoomDouble);

		Zoom = 1 / zoomDouble;

		StateHasChanged();
	}
}
