@page "/galaxy"

@using Stars.Core
@using Stars.Core.Setup
@using Stars.Web.Lab.Data

@inject IJSRuntime JSRuntime

<style>
	.main-container {
		position: relative;
		width: 100%;
		height: 100vh;
	}

	.setup-container {
		margin: 5px;
	}

	.info-panel {
		position: absolute;
		background-color: rgba(40,60,80,0.65);
		color: white;
		border-radius: 3px;
		box-shadow: 0 0 1px 1px rgb(80,120,160);
		padding: 4px;
	}

	.top {
		top: 10px;
	}

	.bottom {
		bottom: 10px;
	}

	.left {
		left: 10px;
	}

	.right {
		right: 10px;
	}
</style>

<div>
	<div class="main-container" id="mejn">
		<UiGalaxy Galaxy="galaxy" OnPlanetSelected="PlanetClicked" @ref="UI" @bind-ScaleRate="ZoomFactor" Width="@screenWidth" Height="@screenHeight">
			<circle cx="@stats.Center.X" cy="@stats.Center.Y" r="15" stroke="blue" fill="transparent" />
			<circle cx="@stats.MinPlanet.Position.X" cy="@stats.MinPlanet.Position.Y" r="10" stroke="green" fill="transparent" />
			<circle cx="@stats.MaxPlanet.Position.X" cy="@stats.MaxPlanet.Position.Y" r="10" stroke="red" fill="transparent" />

			@if (selectedPlanet != null)
			{
				<circle cx="@selectedPlanet.Position.X" cy="@selectedPlanet.Position.Y" r="5" stroke="yellow" fill="transparent" />
			}
		</UiGalaxy>

		@if (selectedPlanet != null)
		{
			<div class="info-panel bottom left" @onclick="() => selectedPlanet = null">
				<PlanetInfoPanel Planet="selectedPlanet" />
			</div>
		}

		<div class="info-panel bottom right">
			<div id="SVGcoords"></div>
			<div id="Calccoords"></div>
			<div>Zoom: @($"{(100 * ZoomFactor):0}%")</div>
		</div>

		<div class="info-panel top left">
			<h5>Closest Neighbor</h5>
			<div>Min: @stats.Min ly</div>
			<div>Max: @stats.Max ly</div>
			<div>Avg: @stats.Avg ly</div>
		</div>

		<div class="info-panel top right">
			<LabelBox Label="Galaxy Size">
				<input @bind-value="settings.GalaxySize" class="num-input" />
			</LabelBox>
			<LabelBox Label="Min. Distance">
				<input @bind-value="settings.MinimumDistanceBetweenPlanets" class="num-input" />
			</LabelBox>
			<LabelBox Label="Planets">
				<input @bind-value="settings.PlanetCount" id="inpPlanets" class="num-input" />
			</LabelBox>

			<button @onclick="Generate">Generate Galaxy</button>
		</div>
	</div>

	@if (errorMessage != null)
	{
		<div style="color: red">@errorMessage</div>
	}
</div>

@code
{
	private GalaxyGeneratorSettings settings = new GalaxyGeneratorSettings();
	private Galaxy galaxy;
	private GalaxyStats stats;
	private string errorMessage;
	private Planet selectedPlanet;
	private Position relativePlanetPosition;
	private UiGalaxy UI;

	private double ZoomFactor = 1;
	int screenHeight = 800;
	int screenWidth = 800;

	protected override void OnInitialized()
	{
		Generate();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		var screen = await JSRuntime.GetScreenSize<Dims>("mejn");
		screenHeight = screen.Height;
		screenWidth = screen.Width;
		StateHasChanged();
	}

	private void PlanetClicked(Planet planet)
	{
		selectedPlanet = planet != selectedPlanet ? planet : null;
	}

	private void Generate()
	{
		errorMessage = null;
		selectedPlanet = null;
		var generator = new GalaxyGenerator();

		try
		{
			galaxy = generator.Generate(settings);
			stats = GalaxyStats.Create(galaxy);
		}
		catch (Exception ex)
		{
			errorMessage = "Error: " + ex.Message;
		}
	}

	struct Dims
	{
		public int Width { get; set; }
		public int Height { get; set; }
	}
}
