@page "/galaxy"

@using Stars.Core
@using Stars.Core.Setup
@using Stars.Web.Lab.Data
@using System.Globalization

@inject IJSRuntime JSRuntime

<style>
	.main-container {
		position: relative;
		width: 100%;
		height: 100vh;
	}

	.setup-container {
		margin: 5px;
	}

	.info-panel {
		position: absolute;
		background-color: rgba(40,60,80,0.65);
		color: white;
		border-radius: 3px;
		box-shadow: 0 0 1px 1px rgb(80,120,160);
		padding: 4px;
	}

	.top {
		top: 10px;
	}

	.bottom {
		bottom: 10px;
	}

	.left {
		left: 10px;
	}

	.right {
		right: 10px;
	}

	.small-font {
		font-size: small;
	}
</style>

<div>
	<div class="main-container" id="mejn">
		<UiGalaxy Galaxy="galaxy" Zoom="Zoom" OnPlanetSelected="PlanetClicked" @bind-SelectedPlanet="selectedPlanet" @ref="UI" />
		<PlanetInfoPanel Planet="selectedPlanet" OnPanelClicked="PlanetClicked" IsEnabled="true" />
		<TurnOrderPanel Game="game" PlayerId="playerId" OnNextTurn="NextTurn" OnNextPlayer="NextPlayer" IsEnabled="true" />
		<GalaxyGenerationPanel OnGenerate="Generate" @bind-Settings="settings" IsEnabled="true" />
	</div>


	@if (errorMessage != null)
	{
		<div style="color: red">@errorMessage</div>
	}
</div>

@code
{
	private GalaxyGeneratorSettings settings = new GalaxyGeneratorSettings() { PlanetCount = 333 };
	private Game game;
	private int playerId;
	private IGalaxy galaxy;
	private string errorMessage;
	private IPlanet selectedPlanet;
	private UiGalaxy UI;

	private double Zoom = 1;

	protected override void OnInitialized()
	{
		Generate();
	}

	protected override void OnAfterRender(bool firstRender)
	{
		base.OnAfterRender(firstRender);

		if (firstRender)
		{
			var reference = DotNetObjectReference.Create(this);
			JSRuntime.BindCallbackMethod(reference, "galaxyView");
		}
	}

	private void PlanetClicked(IPlanet planet)
	{
		selectedPlanet = planet?.Id != selectedPlanet?.Id ? planet : null;
	}

	private void Generate()
	{
		errorMessage = null;
		selectedPlanet = null;

		try
		{
			// Configure
			var gameGenSettings = new GameGeneratorSettings()
			{
				GalaxySettings = settings,
				PlayerNames = { "Federation", "The Borg", "Romulans" },
			};

			// Generate
			var generator = new GameGenerator();
			var game = generator.Generate(gameGenSettings);

			this.playerId = game.Galaxy.Players.First().Id;
			this.game = game;
			this.galaxy = new PlayerView(game.Galaxy, playerId);
		}
		catch (Exception ex)
		{
			errorMessage = "Error: " + ex.Message;
		}
	}

	private void NextTurn()
	{
		game.Update();
	}

	private void NextPlayer()
	{
		playerId += 1;

		if (playerId > game.Galaxy.Players.Last().Id)
		{
			playerId = game.Galaxy.Players.First().Id;
		}

		galaxy = new PlayerView(game.Galaxy, playerId);
		selectedPlanet = null;
	}

	[JSInvokable("ZoomCallback")]
	public void ZoomChanged(string zoomFactor)
	{
		double zoomDouble = 1.0;
		Double.TryParse(zoomFactor, NumberStyles.Any, CultureInfo.InvariantCulture, out zoomDouble);

		Zoom = 1 / zoomDouble;

		StateHasChanged();
	}
}
