@page "/lobby"

@inject GameStoreService GameStore
@inject GameServerService ServerFarm

@if (games != null)
{
	<Container>
		<Row>
			<Column ColumnSize="ColumnSize.Is6.Is3.WithOffset">
				<Table Narrow="true" Striped="true">
					<TableHeader ThemeContrast="ThemeContrast.Dark">
						<TableRow>
							<TableHeaderCell>Id</TableHeaderCell>
							<TableHeaderCell>Name</TableHeaderCell>
							<TableHeaderCell>Galaxy Size</TableHeaderCell>
							<TableHeaderCell>No. of Planets</TableHeaderCell>
							<TableHeaderCell>Space per Planet</TableHeaderCell>
							<TableHeaderCell>No. of Players</TableHeaderCell>
							<TableHeaderCell></TableHeaderCell>
						</TableRow>
					</TableHeader>

					<TableBody>
						@foreach (var game in games)
						{
							<TableRow>
								<TableRowCell>@game.GameId</TableRowCell>
								<TableRowCell>@game.Name</TableRowCell>
								<TableRowCell>@game.GalaxySize</TableRowCell>
								<TableRowCell>@game.PlanetCount</TableRowCell>
								<TableRowCell>@Density(game)</TableRowCell>
								<TableRowCell>@game.PlayerCount</TableRowCell>
								<TableRowCell>
									@for (int pid = 1; pid <= game.PlayerCount; pid++)
									{
										var txt = $"Player#{pid}";
										<NavLink href=@($"game/{game.GameId}/{pid}")>@txt</NavLink>
									}
								</TableRowCell>
							</TableRow>
						}
					</TableBody>
				</Table>

				<Button Clicked="CreateGame">Create Game</Button>

				<Modal @ref="modalRef">
					<ModalBackdrop />
					<ModalContent Centered="true">
						<ModalHeader>
							<ModalTitle>Create Game</ModalTitle>
							<CloseButton Clicked="CancelModal" />
						</ModalHeader>

						<ModalBody>
							<Field>
								<FieldLabel>Game Name</FieldLabel>
								<TextEdit @bind-Text="gameSettings.GameName" Placeholder="The name of the game..." />
							</Field>
							<Field>
								<FieldLabel>Galaxy Size</FieldLabel>
								<NumericEdit @bind-Value="gameSettings.GalaxySettings.GalaxySize" />
							</Field>
							<Field>
								<FieldLabel>Number of Planets</FieldLabel>
								<NumericEdit @bind-Value="gameSettings.GalaxySettings.PlanetCount" />
							</Field>
							<Field>
								<FieldLabel>Min. Distance Between Planets</FieldLabel>
								<NumericEdit @bind-Value="gameSettings.GalaxySettings.MinimumDistanceBetweenPlanets" />
							</Field>
							<Field>
								<FieldLabel>Galaxy Padding</FieldLabel>
								<NumericEdit @bind-Value="gameSettings.GalaxySettings.Padding" />
							</Field>
							<Field>
								<FieldLabel>Players (@gamePlayerCount)</FieldLabel>
								<MemoEdit @bind-Text="@gamePlayerNames" Rows="@(gamePlayerCount + 1)" />
							</Field>
						</ModalBody>

						<ModalFooter>
							<Button Color="Color.Secondary" Clicked="CancelModal">Cancel</Button>
							<Button Color="Color.Primary" Clicked="OkModal">Create</Button>
						</ModalFooter>
					</ModalContent>
				</Modal>
			</Column>
		</Row>
	</Container>
}

@code
{
	private List<GameInfo> games;

	protected override void OnInitialized()
	{
		LoadGames();
	}

	private void LoadGames()
	{
		games = GameStore
			.GetGames()
			.ToList();
	}

	private void CreateGame()
	{
		ShowModal();
	}

	private static int Density(GameInfo game)
	{
		var area = Math.Pow(game.GalaxySize, 2);
		var areaPerPlanet = area / game.PlanetCount;
		var root = Math.Sqrt(areaPerPlanet);
		return (int)Math.Round(root, 0);
	}

	private Modal modalRef;
	private GameGeneratorSettings gameSettings = new GameGeneratorSettings();

	private int gamePlayerCount => GetPlayerNames().Count();
	private string gamePlayerNames;

	private IEnumerable<string> GetPlayerNames()
	{
		return (gamePlayerNames ?? string.Empty)
			.Split('\n')
			.Select(name => name.Trim())
			.Where(name => !string.IsNullOrEmpty(name));
	}

	private void ShowModal()
	{
		gameSettings = new GameGeneratorSettings()
		{
			GalaxySettings = new GalaxyGeneratorSettings()
			{
				GalaxySize = 800,
				MinimumDistanceBetweenPlanets = 15,
				Padding = 20,
				PlanetCount = 400,
			},
		};

		gamePlayerNames = "Federation\nKlingons\nRomulans\nBorg";

		modalRef.Show();
	}

	private void OkModal()
	{
		modalRef.Hide();

		gameSettings.PlayerNames = GetPlayerNames().ToArray();

		var generator = new GameGenerator();
		var game = generator.Generate(gameSettings);
		int id = GameStore.AddGame(game);

		LoadGames();
	}

	private void CancelModal()
	{
		modalRef.Hide();
	}
}
